from sqlalchemy.orm import Session
from caballo_api.models import Cliente, Consulta
from typing import List, Optional
from datetime import datetime

class RecepcionistaService:
    def __init__(self, db: Session):
        self.db = db

    def crear_cliente(self, rut: str, nombre: str, apellido: str, edad: int, email: str) -> Cliente:
        # Verificar existencia
        if self.db.query(Cliente).filter_by(rut=rut).first():
            raise ValueError("Cliente ya existe")
        nuevo = Cliente(rut=rut, nombre=nombre, apellido=apellido, edad=edad, email=email)
        self.db.add(nuevo)
        self.db.commit()
        self.db.refresh(nuevo)
        return nuevo

    def obtener_cliente(self, rut: str) -> Cliente:
        cliente = self.db.query(Cliente).filter_by(rut=rut).first()
        if not cliente:
            raise LookupError("Cliente no encontrado")
        return cliente

    def listar_clientes(self) -> List[Cliente]:
        return self.db.query(Cliente).all()

    def agendar_consulta(
        self,
        id_cliente: int,
        id_mascota: int,
        id_vet: int,
        id_recepcionista: int,
        fecha_hora: datetime,
        motivo: str
    ) -> Consulta:
        consulta = Consulta(
            id_cliente=id_cliente,
            id_mascota=id_mascota,
            id_vet=id_vet,
            id_recepcionista=id_recepcionista,
            fecha_hora=fecha_hora,
            motivo=motivo
        )
        self.db.add(consulta)
        self.db.commit()
        self.db.refresh(consulta)
        return consulta

    def listar_consultas(self) -> List[Consulta]:
        return self.db.query(Consulta).order_by(Consulta.fecha_hora).all()

    def actualizar_consulta(self, id_consulta: int, **datos) -> Consulta:
        consulta = self.db.query(Consulta).filter_by(id_consulta=id_consulta).first()
        if not consulta:
            raise LookupError("Consulta no encontrada")
        for campo, valor in datos.items():
            setattr(consulta, campo, valor)
        self.db.commit()
        self.db.refresh(consulta)
        return consulta

    def eliminar_consulta(self, id_consulta: int) -> None:
        consulta = self.db.query(Consulta).filter_by(id_consulta=id_consulta).first()
        if not consulta:
            raise LookupError("Consulta no encontrada")
        self.db.delete(consulta)
        self.db.commit()
